@using Models
@using Enums
@using System.Diagnostics;
@using Services;
@page "/"

<div class="bg-white">
    <div class="pt-6">
        <nav aria-label="Breadcrumb">
            <ol role="list" class="mx-auto flex max-w-2xl items-center space-x-2 px-4 sm:px-6 lg:max-w-7xl lg:px-8">
                <li>
                    <div class="flex items-center">
                        <a href="#" class="mr-2 text-sm font-medium text-gray-900">Men</a>
                        <svg width="16" height="20" viewBox="0 0 16 20" fill="currentColor" aria-hidden="true" class="h-5 w-4 text-gray-300">
                            <path d="M5.697 4.34L8.98 16.532h1.327L7.025 4.341H5.697z" />
                        </svg>
                    </div>
                </li>
                <li>
                    <div class="flex items-center">
                        <a href="#" class="mr-2 text-sm font-medium text-gray-900">Clothing</a>
                        <svg width="16" height="20" viewBox="0 0 16 20" fill="currentColor" aria-hidden="true" class="h-5 w-4 text-gray-300">
                            <path d="M5.697 4.34L8.98 16.532h1.327L7.025 4.341H5.697z" />
                        </svg>
                    </div>
                </li>

                <li class="text-sm">
                    <a href="#" aria-current="page" class="font-medium text-gray-500 hover:text-gray-600">Clothing name here</a>
                </li>
            </ol>
        </nav>

        <!-- Image gallery -->
    <div class="mx-auto mt-6 max-w-2xl sm:px-6 lg:grid lg:max-w-7xl grid grid-cols-3 gap-4 lg:gap-x-8 lg:px-8">

        @for(int i = 0; i < MAX_IMAGES; i++)
        {
            int index = i;
            switch (i)
            {
                case 0:
                        <div>
                            <img src="@RenderImage(index)" class="rounded-lg object-cover" />
                            <InputFile accept="image/*" OnChange="(ev) =>UploadImage(ev, index)" />
                        </div>
                    break;
                default:
                        <div>
                            <img src="@RenderImage(index)" class="rounded-lg object-cover" />
                            <InputFile accept="image/*" OnChange="(ev) =>UploadImage(ev, index)" />
                        </div>
                    break;
            }               
        }
    </div>

        <!-- Product info -->
        <div class="mx-auto max-w-2xl px-4 pt-10 pb-16 sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:grid-rows-[auto_auto_1fr] lg:gap-x-8 lg:px-8 lg:pt-16 lg:pb-24">
            <div class="gap-y-10vh lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8">
                <div class="flex items-center">
                    <label class="font-bold text-2xl sm:text-3xl mr-2">
                        Name
                    </label>
                    <InputText 
                    @bind-Value=_clothing.Name 
                    placeholder="enter name"
                    class="text-xl sm:text-2xl w-full appearance-none text-gray-900"
                    />
                </div>
                <div class="flex items-center">
                    <label class="font-bold text-md sm:text-xl mr-2">
                        Store
                    </label>
                    <InputText @bind-Value=_clothing.Store
                    placeholder="enter store name"
                    class="text-lg sm:text-base w-full appearance-none text-gray-900" />
                </div>
                <label for="date" class="font-bold text-md sm:text-xl mr-2">Date bought</label>
                <input type="date" @bind-value=_clothing.Date>
            </div>

            <!-- Options -->
            <div class="mt-4 lg:row-span-3 lg:mt-0">
                <h2 class="sr-only">Product information</h2>
                <div class="flex flex-row text-2xl sm:text-3xl gap-1">
                    <p>€</p>
                    <InputNumber @bind-Value=_clothing.Prize
                    placeholder="0"
                    class="w-full appearance-none text-gray-900 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none"
                    min=0 />
                </div>

                <div class="mt-10">
                    <h3 class="text-md font-medium text-gray-900">Color</h3>

                    <fieldset aria-label="Choose a color" class="mt-4">
                        <div class="flex flex-wrap gap-x-3 gap-y-3">
                            @foreach (var color in Enum.GetValues(typeof(Color)))
                            {
                                <label aria-label=@color class="relative -m-0.5 flex cursor-pointer items-center justify-center rounded-full p-0.5 ring-gray-900 focus:outline-hidden">
                                    <input @onclick="() => ChooseColors((Color)color)" type="radio" name="color-choice" value=@color class="sr-only">
                                    <span aria-hidden="true" class=@GetColorClass((Color)color)></span>
                                </label>      
                            }
                        </div>
                    </fieldset>
                </div>
                <div class="mt-10">
                    <h2 class="text-md font-medium text-gray-900">Type</h2>
                    <fieldset aria-label="Choose a size">
                        <div class="grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4 mt-3">
                            @foreach (var clothingType in Enum.GetValues(typeof(ClothingType)))
                            {

                                <label class=@GetPropertyClass((ClothingType)clothingType)>
                                    <input @onclick="() => ChoosePropertyValue((ClothingType)clothingType)"
                                    type="radio" 
                                    name="size-choice" 
                                    class="sr-only">
                                    <span>
                                        @clothingType.ToString().ToUpper()[0]@clothingType.ToString().ToLower().Substring(1)
                                    </span>                                  
                                </label>
                            } 
                        </div>
                    </fieldset>
                </div>
                <div class="mt-10">
                    <h3 class="text-md font-medium text-gray-900">Size</h3>
                    <div class="mt-4">
                        <InputSelect @bind-Value="_clothing.Size" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-auto p-2.5">
                            @foreach (var size in Enum.GetValues(typeof(Size)))
                            {
                                <option value=@size>@size</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="mt-10">
                <div class="space-y-6">
                    <p class="text-base text-gray-900">description text...</p>
                </div>
            </div>

            <div class="mt-10">
                <h2 class="text-md font-medium text-gray-900">Season</h2>

                <fieldset aria-label="Choose a season">
                    <div class="grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4 mt-3">
                        @foreach (var season in Enum.GetValues(typeof(Season)))
                        {

                            <label class=@GetPropertyClass((Season)season)>
                                <input 
                                @onclick="() => ChoosePropertyValue((Season)season)" 
                                type="radio" 
                                name="size-choice" 
                                class="sr-only">
                                <span>@season</span>  
                            </label>
                        } 
                    </div>
                </fieldset>

                <div class="mt-4">
                    <h2 class="text-md font-medium text-gray-900">Materials</h2>
                    <fieldset aria-label="Choose a size">
                        <div class="grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4 mt-3">
                            @foreach (var material in Enum.GetValues(typeof(Material)))
                            {

                                <label class=@GetPropertyClass((Material)material)>
                                    <input 
                                    @onclick="() => ChoosePropertyValue((Material)material)" 
                                    type="radio" 
                                    name="size-choice" 
                                    class="sr-only">
                                    <span>
                                        @(material.ToString().ToLower()
                                                                .Split('_')
                                                                .Select(word => word.First().ToString().ToUpper() + word.Substring(1))
                                                                .Aggregate((a, b) => a + " " + b))
                                    </span>                                  
                                </label>
                            } 
                        </div>
                    </fieldset>
                </div>
                <div class="mt-4">
                    <h2 class="text-md font-medium text-gray-900">Aesthetic</h2>
                    <fieldset aria-label="Choose a size">
                        <div class="grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4 mt-3">
                            @foreach (var aesthetic in Enum.GetValues(typeof(Aesthetic)))
                            {

                                <label class=@GetPropertyClass((Aesthetic)aesthetic)>
                                    <input 
                                    @onclick="() => ChoosePropertyValue((Aesthetic)aesthetic)" 
                                    type="radio" 
                                    name="size-choice" 
                                    class="sr-only">
                                    <span>
                                        @(aesthetic.ToString().ToLower()
                                                                .Split('_')
                                                                .Select(word => word.First().ToString().ToUpper() + word.Substring(1))
                                                                .Aggregate((a, b) => a + " " + b))
                                    </span>                                  
                                </label>
                            } 
                        </div>
                    </fieldset>
                    <button type="submit" class="mt-10 flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-hidden">Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public Clothing _clothing = new Clothing();
    public const int MAX_IMAGES = 3;
    private List<string> base64Strings = new List<string>();
    private List<Image> Images = new List<Image>();
    private Image[] ImageArray = new Image[MAX_IMAGES];

    public string RenderImage(int imageIndex)
    {
        if(ImageArray.Any() && ImageArray[imageIndex] is not null)
            return $"data:{ImageArray[imageIndex].ContentType};base64,{ImageArray[imageIndex].Base64String}";

        return"Images/placeholder_image.png";

    }

    public async Task UploadImage(InputFileChangeEventArgs eventArgs, int id)
    {
        try
        {
            var file = eventArgs.GetMultipleFiles().FirstOrDefault();
            if (file is not null && base64Strings.Count < MAX_IMAGES)
            {
                var buffer = new byte[file.Size];
                using (var stream = file.OpenReadStream())
                {
                    await stream.ReadAsync(buffer, 0, buffer.Length);
                }

                var base64String = Convert.ToBase64String(buffer);

                ImageArray[id] = new Image(file.ContentType, file.Name, base64String);
            } 
        }
        catch (Exception e)
        {

            Debug.WriteLine(e.Message);
        }
    }
    

    public string GetColorClass(Color color)
    {
        var baseClasses = "size-8 rounded-full border border-black/10 relative -m-0.5 flex cursor-pointer items-center justify-center rounded-full p-0.5 ring-gray-900 focus:outline-hidden";
        bool isSelected = _clothing.Colors.Contains(color);

        return color switch
        {
            Color.BROWN => $"{baseClasses} {(isSelected ? "ring ring-offset-1 ring-gray-400" : "")} bg-orange-950 hover:bg-orange-800",
            Color.BEIGE => $"{baseClasses} {(isSelected ? "ring ring-offset-1 ring-gray-400" : "")} bg-stone-400 hover:bg-stone-300",
            Color.WHITE => $"{baseClasses} {(isSelected ? "ring ring-offset-1 ring-gray-400" : "")} bg-white",
            Color.BLACK => $"{baseClasses} {(isSelected ? "ring ring-offset-1 ring-gray-400" : "")} bg-black",
            _ => $"{baseClasses} {(isSelected ? $"ring ring-offset-1 ring-gray-400" : "")} bg-{color.ToString().ToLower()}-500 hover:bg-{color.ToString().ToLower()}-400"
        };
    }

    public void ChooseColors(Color color)
    {
        if (!_clothing.Colors.Contains(color)) _clothing.Colors.Add(color);

        else _clothing.Colors.Remove(color);

        StateHasChanged();
    }

    public void ChoosePropertyValue<T>(T property)
    {
        switch (property)
        {
            case Aesthetic aesthetic:
                _clothing.Aesthetic = aesthetic;
                break;
            case Material material:
                _clothing.Material = material;
                break;
            case Season season:
                _clothing.Season = season;
                break;
            case ClothingType clothingType:
                _clothing.Type = clothingType;
                break;
        }

        StateHasChanged();
    }

    public string GetPropertyClass<T>(T property)
    {
        const string baseClass = "border-1 border-gray-900 group relative flex cursor-pointer items-center justify-center rounded-md px-4 py-3 text-xs font-medium text-gray-900 shadow-sm focus:outline-none sm:flex-1 sm:py-6";

        return property switch
        {
            Aesthetic aesthetic => _clothing.Aesthetic == aesthetic ? $"{baseClass} bg-gray-300" : $"{baseClass} bg-gray-50 hover:bg-gray-300",
            Material material => _clothing.Material == material ? $"{baseClass} bg-gray-300" : $"{baseClass} bg-gray-50 hover:bg-gray-300",
            Season season => $"{GetSeasonColor(season)}",
            ClothingType clothingType => _clothing.Type == clothingType ? $"{baseClass} bg-gray-300" : $"{baseClass} bg-gray-50 hover:bg-gray-300",
            _ => baseClass
        };
    }

    private string GetSeasonColor(Season season)
    {
        var isSelected = _clothing.Season == season;
        const string baseClass = "border-1 border-gray-500 group relative flex cursor-pointer items-center justify-center rounded-md px-4 py-3 text-xs font-medium text-gray-900 shadow-sm focus:outline-none sm:flex-1 sm:py-6";

        Debug.WriteLine(_clothing.Date);
        return season switch
        {
            Season.FALL => isSelected ? $"{baseClass} bg-amber-300" : $"{baseClass} bg-amber-500 hover:bg-amber-300",
            Season.WINTER => isSelected ? $"{baseClass} bg-sky-300" : $"{baseClass} bg-sky-500 hover:bg-sky-300",
            Season.SPRING => isSelected ? $"{baseClass} bg-rose-300" : $"{baseClass} bg-rose-500 hover:bg-rose-300",
            Season.SUMMER => isSelected ? $"{baseClass} bg-lime-300" : $"{baseClass} bg-lime-500 hover:bg-lime-300",
            _ => ""
        };
    }

}

